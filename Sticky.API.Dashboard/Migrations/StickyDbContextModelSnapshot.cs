// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sticky.Models.Context;

namespace Sticky.API.Dashboard.Migrations
{
    [DbContext(typeof(StickyDbContext))]
    partial class StickyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sticky.Models.Context.ActionType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("Sticky.Models.Context.ActivityType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Sticky.Models.Context.AudienceType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AudienceTypeName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AudienceTypes");
                });

            modelBuilder.Entity("Sticky.Models.Context.CategoryStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("Counter");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Day");

                    b.Property<int>("Month");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryStats");
                });

            modelBuilder.Entity("Sticky.Models.Context.Click", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Day");

                    b.Property<int>("Month");

                    b.Property<int>("SegmentId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("Clicks");
                });

            modelBuilder.Entity("Sticky.Models.Context.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddToCardId")
                        .HasMaxLength(100);

                    b.Property<bool>("AddToCardValidated");

                    b.Property<bool>("CategoryValidated");

                    b.Property<bool?>("FavValidated");

                    b.Property<string>("FinalizePage")
                        .HasMaxLength(100);

                    b.Property<bool>("FinalizeValidated");

                    b.Property<string>("HashCode")
                        .HasMaxLength(450);

                    b.Property<string>("HostAddress")
                        .HasMaxLength(100);

                    b.Property<bool?>("HostPriority");

                    b.Property<bool>("HostValidated");

                    b.Property<string>("LogoAddress")
                        .HasMaxLength(2000);

                    b.Property<string>("LogoOtherData")
                        .HasMaxLength(100);

                    b.Property<bool>("PageValidated");

                    b.Property<int?>("ProductImageHeight");

                    b.Property<int?>("ProductImageWidth");

                    b.Property<bool>("ProductValidated");

                    b.Property<int?>("ProductValidityId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<int?>("UserValidityId");

                    b.Property<string>("ValidatingHtmlAddress")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("Sticky.Models.Context.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CookieSyncAddress")
                        .HasMaxLength(400);

                    b.Property<string>("Domain")
                        .HasMaxLength(50);

                    b.Property<string>("ParnerHash")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("Verified");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Sticky.Models.Context.PartnerRequestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DayCost");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("date");

                    b.Property<int>("PartnerId");

                    b.Property<int>("TotalRequestsCounter");

                    b.Property<int>("TotalResponse");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerRequestLogs");
                });

            modelBuilder.Entity("Sticky.Models.Context.ProductTextTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaxPrice");

                    b.Property<int?>("MinPrice");

                    b.Property<int>("SegmentId");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("ProductTextTemplates");
                });

            modelBuilder.Entity("Sticky.Models.Context.RecordedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("Counter");

                    b.Property<int>("HostId");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("RecordedCategories");
                });

            modelBuilder.Entity("Sticky.Models.Context.ResponseLogger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Counter");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("PartnerId");

                    b.HasKey("Id");

                    b.ToTable("ResponseLogger");
                });

            modelBuilder.Entity("Sticky.Models.Context.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionExtra")
                        .HasMaxLength(200);

                    b.Property<int>("ActionId");

                    b.Property<string>("AudienceExtra")
                        .HasMaxLength(200);

                    b.Property<int>("AudienceId");

                    b.Property<long?>("AudienceNumber");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(450);

                    b.Property<int>("HostId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("Paused");

                    b.Property<string>("SegmentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HostId");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Sticky.Models.Context.SegmentPagePattern", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("Deleted");

                    b.Property<int>("HostId");

                    b.Property<string>("PagePattern")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("PatternName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("HostId");

                    b.ToTable("SegmentPagePattern");
                });

            modelBuilder.Entity("Sticky.Models.Context.SegmentStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Clicks");

                    b.Property<int>("Day");

                    b.Property<int>("Impressions");

                    b.Property<int>("Month");

                    b.Property<int>("SegmentId");

                    b.Property<int?>("TextTemplateId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("SegmentStats");
                });

            modelBuilder.Entity("Sticky.Models.Context.SegmentStaticNative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NativeLogoAddress")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("NativeLogoOtherData")
                        .HasMaxLength(50);

                    b.Property<string>("NativeText")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SegmentId");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("SegmentStaticNatives");
                });

            modelBuilder.Entity("Sticky.Models.Context.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdSize")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Height");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Sticky.Models.Context.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Sticky.Models.Context.UserTotalVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<int>("HostId");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("UserTotalVisits");
                });

            modelBuilder.Entity("Sticky.Models.Context.UsersHostAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdminAccess");

                    b.Property<int?>("HostId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersHostAccess");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sticky.Models.Context.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sticky.Models.Context.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sticky.Models.Context.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sticky.Models.Context.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sticky.Models.Context.CategoryStat", b =>
                {
                    b.HasOne("Sticky.Models.Context.RecordedCategory", "Category")
                        .WithMany("CategoryStats")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CategoryStats_RecordedCategories");
                });

            modelBuilder.Entity("Sticky.Models.Context.Click", b =>
                {
                    b.HasOne("Sticky.Models.Context.Segment", "Segment")
                        .WithMany("Clicks")
                        .HasForeignKey("SegmentId")
                        .HasConstraintName("FK_Clicks_Segments");
                });

            modelBuilder.Entity("Sticky.Models.Context.Host", b =>
                {
                    b.HasOne("Sticky.Models.Context.User", "User")
                        .WithMany("Hosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Hosts_AspNetUsers");
                });

            modelBuilder.Entity("Sticky.Models.Context.PartnerRequestLog", b =>
                {
                    b.HasOne("Sticky.Models.Context.Partner", "Partner")
                        .WithMany("PartnerRequestLogs")
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("FK_PartnerRequestLogs_Partners");
                });

            modelBuilder.Entity("Sticky.Models.Context.ProductTextTemplate", b =>
                {
                    b.HasOne("Sticky.Models.Context.Segment", "Segment")
                        .WithMany("ProductTextTemplates")
                        .HasForeignKey("SegmentId")
                        .HasConstraintName("FK_ProductTextTemplates_DruidSegments");
                });

            modelBuilder.Entity("Sticky.Models.Context.RecordedCategory", b =>
                {
                    b.HasOne("Sticky.Models.Context.Host", "Host")
                        .WithMany("RecordedCategories")
                        .HasForeignKey("HostId")
                        .HasConstraintName("FK_RecordedCategories_Hosts");
                });

            modelBuilder.Entity("Sticky.Models.Context.Segment", b =>
                {
                    b.HasOne("Sticky.Models.Context.ActionType", "Action")
                        .WithMany("Segments")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_DruidSegments_ActionTypes");

                    b.HasOne("Sticky.Models.Context.AudienceType", "Audience")
                        .WithMany("Segments")
                        .HasForeignKey("AudienceId")
                        .HasConstraintName("FK_DruidSegments_AudienceTypes");

                    b.HasOne("Sticky.Models.Context.User", "Creator")
                        .WithMany("Segments")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_DruidSegments_AspNetUsers");

                    b.HasOne("Sticky.Models.Context.Host", "Host")
                        .WithMany("Segments")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sticky.Models.Context.SegmentPagePattern", b =>
                {
                    b.HasOne("Sticky.Models.Context.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sticky.Models.Context.Host", "Host")
                        .WithMany("SegmentPagePattern")
                        .HasForeignKey("HostId")
                        .HasConstraintName("FK_SegmentPagePattern_Hosts");
                });

            modelBuilder.Entity("Sticky.Models.Context.SegmentStaticNative", b =>
                {
                    b.HasOne("Sticky.Models.Context.Segment", "Segments")
                        .WithMany("SegmentStaticNatives")
                        .HasForeignKey("SegmentId")
                        .HasConstraintName("FK_SegmentStaticNatives_Segments");
                });

            modelBuilder.Entity("Sticky.Models.Context.UsersHostAccess", b =>
                {
                    b.HasOne("Sticky.Models.Context.Host", "Host")
                        .WithMany("UsersHostAccess")
                        .HasForeignKey("HostId")
                        .HasConstraintName("FK_UsersHostAccess_Hosts");

                    b.HasOne("Sticky.Models.Context.User", "User")
                        .WithMany("UsersHostAccesses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersHostAccess_AspNetUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
